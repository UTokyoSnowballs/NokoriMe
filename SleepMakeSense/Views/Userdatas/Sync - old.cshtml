@using SleepMakeSense.Models

@model SyncViewModel


@using System.Web.Script.Serialization


@{

    Layout = "~/Views/Shared/_Layout.cshtml";

}

<!DOCTYPE html>

<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>Sync</title>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js" charset="utf-8"></script>
        <!--script src="https://d3js.org/d3.v4.min.js"></!--script-->


        <style type="text/css">
            .axis path, .axis line {
                fill: none;
                stroke: #747F97;
                shape-rendering: crispEdges;
         }
            .axis {
                font-size: 14px;
            }
            .x.axis path {
                display: none;
            }
            .tooltip-timeseries {
                width: 160px;
                height: 36px;
                padding: 2px;
                font: 12px sans-serif;
                color: white;
                background: -webkit-linear-gradient(141deg, #F74657, #459EE8);
                background: linear-gradient(141deg, #F74657, #459EE8);
                background: -o-linear-gradient(141deg, #F74657, #459EE8);
                background: -moz-linear-gradient(141deg, #F74657, #459EE8);
                border: 0px;
                border-radius: 8px;
                text-align: center;
                pointer-events: none;
                position: absolute;
            }
            .tooltip-bubble {
                position: absolute;
                text-align: left;
                width: 200px;
                height: auto;
                padding: 16px;
                font: 12px sans-serif;
                color: white;
                background: -webkit-linear-gradient(141deg, #F74657, #459EE8);
                background: linear-gradient(141deg, #F74657, #459EE8);
                background: -o-linear-gradient(141deg, #F74657, #459EE8);
                background: -moz-linear-gradient(141deg, #F74657, #459EE8);
                border: 6px;
                border-radius: 8px;
                pointer-events: none;
            }
            .tooltip-bubble h4 {
                text-align: left;
                color: white;
            }
            svg.bubble {
                padding-right: 15px;
                padding-left: 15px;
                padding-top: 15px;
            }
        </style>
    </head>

    <body>
        <div id="DataProcessing">
            <script type="text/javascript">

                var factorList = [];
                var cMinutesAsleep = [];
                var cMinutesAwake = [];
                var cAwakeningsCount = [];
                var cMinutesToFallAsleep = [];
                var cSleepEfficiency = [];
                var cWakeUpFresh = [];
                var BoxPosition = [, ];
                var MinutesAsleep = [];
                var MinutesAwake = [];
                var AwakeningsCount = [];
                var MinutesToFallAsleep = [];
                var SleepEfficiency = [];
                var WakeUpFresh = [];
                var facCoff = 0;
                var quest2 = false;
                var quest3 = false;


                var facWidth = 0;
                var facHeight = 0;
                @foreach (SleepMakeSense.Models.CorrList d in Model.CorrCoefficient)
                {
                    if (@d.Belong == "MinutesAsleep")
                    {
                        @:cMinutesAsleep.push({ Name: "@d.Name", Coefficient: "@d.Coefficient", Width: facWidth, Height: facHeight, Note: "@d.Note" });
                        @:facWidth += 160;
                     }

                   @:if (facWidth == 480)
                   {
                     @: facHeight += 130;
                     @: facWidth == 0;
                   }
                }

                facWidth = 0;
                facHeight = 0;

                @foreach (SleepMakeSense.Models.CorrList d in Model.CorrCoefficient)
                {

                    if (@d.Belong == "MinutesAwake")
                    {
                    @:cMinutesAsleep.push({ Name: "@d.Name", Coefficient: "@d.Coefficient", Width: facWidth, Height: facHeight, Note: "@d.Note" });
                    @:facWidth += 160;
                }

                @:if (facWidth == 480)
                {
                    @: facHeight += 130;
                    @: facWidth == 0;
                    }
                }

                console.log(cMinutesAsleep);

                facWidth = 0;
                facHeight = 0;

                @foreach (SleepMakeSense.Models.CorrList d in Model.CorrCoefficient)
                {

                    if (@d.Belong == "SleepEfficiency")
                {
                    @:cMinutesAsleep.push({ Name: "@d.Name", Coefficient: "@d.Coefficient", Width: facWidth, Height: facHeight, Note: "@d.Note" });
                    @:facWidth += 160;
                }

                @:if (facWidth == 480)
                {
                    @: facHeight += 130;
                    @: facWidth == 0;
                }
                }


                @foreach (SleepMakeSense.Models.Userdata d in Model.Userdata)
                {
                        var dateOnly = d.DateStamp.ToShortDateString();
                        var weekday = d.DateStamp.DayOfWeek;

                        @:MinutesAsleep.push({ Date: "@dateOnly", Day: "@weekday", Value: "@d.FitbitData.MinutesAsleep" });
                        @:AwakeningsCount.push({ Date: "@dateOnly", Day: "@weekday", Value: "@d.FitbitData.AwakeningsCount" });
                        @:SleepEfficiency.push({ Date: "@dateOnly", Day: "@weekday", Value: "@d.FitbitData.SleepEfficiency" });
                        @:WakeUpFresh.push({ Date: "@dateOnly", Day: "@weekday", Value: "@d.DiaryData.WakeUpFreshness" });

                 }

                alert("Your Fitbit data synced! Visualize your personal sleep affecting factors now.");

                function processData(data) {
                    return { children: data };
                }

                function testVis(mydata, section, textp, sfeature) {

                    var width = 500, height = 300;
                    format = d3.format(",d");

                    var svg = d3.select(section).append("svg")
                     .attr("width", width)
                     .attr("height", height)
                      .attr("class", "bubble");

                    var legend_data = [
                    { "color": "#459EE8", "text": "good" }, //Very strong positive relationship
                   /* { "color": "#99FF99", "text": "Strong positive relationship" },
                    { "color": "#CCFFCC", "text": "Moderate positive relationship" },
                    { "color": "#F6CED8", "text": "Moderate negative relationship" },
                    { "color": "#F7819F", "text": "Strong negative relationship" },*/
                    { "color": "#F74657", "text": "bad" }]; //Very strong negative relationship

                    if (mydata.length == 0) {
                        document.getElementById(textp).innerText = "None of the tracked factors seems to impact your " + sfeature + ". We havn't found any connections in your data, please give us more infomation.";
                    } else {

                        var div = d3.select(section).append("div")
                             .attr("class", "tooltip-bubble")
                            .style("opacity", 0);

                        var bubble = d3.layout.pack()
                        .size(100, 50).padding(function (d) { return d.width; })
                        //.value(function (d) { temp = Math.abs(d.Coefficient); if (temp >= 0) { return temp; } })
                        //.padding(50); // padding between adjacent bubbles

                        var nodes = bubble.nodes(processData(mydata)).filter(function (d) { return !d.children; });
                        var vis = svg.selectAll("g.node").data(nodes);

                        var visEnter = vis.enter().append("g")
                        .attr("class", "node")
                        .attr('width', 150)
                        .attr('height', 100);

                        var circles = visEnter.append("rect")
                        //.attr("r", function (d) { return d.r; })
                        //.attr("r", 60)
                        .attr("x", function (d) { return d.Width })
                        .attr("y", function (d) { return d.Height })
                        //.transition().duration(500)
                        .attr('width', 155)
                        .attr('height', 105)
                        .style("fill", "#2C3041")

                        .on("mouseover", function (d) {
                            d3.select(this)
                                .style("stroke", "#373E4F")
                                .style("stroke-width", 3)
                                .style("cursor", "pointer");
                            div.transition()
                                .duration(100)
                                .style("opacity", 1);

                            div.html("<h4><center>" + d.Name + "</h4>" + d.Note)
                                  .style("left", 170 + "px")
                                  .style("top", -100 + "px");
                            //.style("top", function (d) {
                            //return (this.y - 300) + "px";
                            //return this.y + "px";
                            //})
                        })
                            .on("mouseout", function (d) {
                                d3.select(this)
                                   .style("stroke", "#373E4F")
                                   .style("stroke-width", 1);
                                div.transition()
                                    .duration(100)
                                    .style("opacity", 0);
                            });

                        visEnter.append("text")
                        .style("text-anchor", "middle")
                        .attr("x", function (d) {
                            if (d.Width == 0) {
                                return 75;
                            } else if (d.Width == 160) {
                                return 235;
                            } else {
                                return 395;
                            }
                        })
                        .style("fill", function (d) {
                            coeff = d.Coefficient;
                            console.log(coeff);
                            /*if (coeff < 0) {
                                temp = Math.abs(coeff);
                                if ((temp >= 0.8) && (temp <= 1.0)) { return "#F74657"; }
                                else if ((temp < 0.8) && (temp >= 0.5)) { return "#F74657"; }
                                else if ((temp < 0.5) && (temp >= 0.3)) { return "#F74657"; }
                            } else */if (coeff >= 0) {
                                if ((coeff >= 0.8) && (coeff <= 1.0)) { return "#459EE8"; }
                                else if ((coeff < 0.8) && (coeff >= 0.5)) { return "#F74657"; }  //#99FF99
                                //else if ((coeff < 0.5) && (coeff >= 0.3)) { return "#CCFFCC"; }
                            }
                        })
                        .attr("y", function (d) {
                            if (d.Height != 0) {
                                return 160;
                            } else {
                                return 50;
                            }
                        })
                        .attr("dy", ".3em")
                        //.style("alignment-baseline", "middle")
                        //.style("text-anchor", "middle")
                        .text(function (d) { return d.Name; });
                        //.attr("x", function (d) { return d.width / 2 })
                        //.attr("y", function (d) { return d.height / 2 });

                        /* var legend = svg.selectAll(".legend")
                             .data(legend_data)
                           .enter().append("g")
                             .attr("class", "legend")
                             .attr("transform", function (d, i) { return "translate(0," + i * 20 + ")"; });

                         legend.append("rect")
                             .attr("x", width - 170)
                             .attr("y", 135)
                             .attr("width", 18)
                             .attr("height", 18)
                             .style("fill", function (d) { return d.color; });

                         legend.append("text")
                             .attr("x", width - 170)
                             .attr("y", 135)
                             .attr("dy", ".35em")
                             .style("text-anchor", "start")
                             .text(function (d) { return d.text; }); */
                    }
                }

                function minTohr(minutes) {
                    var hours = Math.floor(Math.abs(minutes) / 60);
                    var minutes = Math.abs(minutes) % 60;
                    return hours + 'hrs' + minutes + 'min';
                }


                function PlotTimeseries(myData, section, mark, sFeature) {

                    d3.select(section).selectAll("*").remove();
                    var red = "#F74657";
                    var blue = "#459EE8";

                    var w = 500;
                    var h = 350;
                    var margin = { top: 30, right: 20, bottom: 50, left: 40 };
                    width = w - margin.left - margin.right,
                    height = h - margin.top - margin.bottom;
                    parseDate = d3.time.format("%m/%d/%Y").parse;

                    var chart = d3.select(section).append("svg")
                  .attr("width", w)
                  .attr("height", h)
                  .append("g")
                  .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

                    myData.forEach(function (d) {
                        d.Date = parseDate(d.Date);
                        if (mark == "MinutesAsleep") { d.Value = +(d.Value / 60); }
                        else d.Value = +d.Value;
                    });

                    var xRange = d3.scale.ordinal().rangeRoundBands([0, width], 0.2);

                    var yRange = d3.scale.linear().range([height, 0]);

                    var xAxis = d3.svg.axis()
                                  .scale(xRange)
                                  .orient("bottom")
                                  .ticks(8)
                                  .tickFormat(d3.time.format("%d/%m"));

                    var yAxis = d3.svg.axis()
                                  .scale(yRange)
                                  .orient("left")
                                  .ticks(5);

                    xRange.domain(myData.map(function (d) { return d.Date; }));
                    yRange.domain([0, d3.max(myData, function (d) { return d.Value; })]);

                    chart.append("g")
                        .attr("class", "x axis")
                        .attr("transform", "translate(0," + height + ")")
                        .call(xAxis)
                        .selectAll("text")
                        .style("text-anchor", "end")
                        .attr("dx", "-.8em")
                        .attr("dy", "-.55em")
                        .attr("transform", "rotate(-90)");

                    chart.append("g")
                        .attr("class", "y axis")
                        .call(yAxis)
                        .append("text")
                        .attr("transform", "rotate(-90)")
                        .attr("y", 6)
                        .attr("dy", ".71em")
                        .style("text-anchor", "end")
                        .text(sFeature);




                    var div = d3.select(section).append("div")
                                .attr("class", "tooltip-timeseries")
                                .style("opacity", 0);

                    var formatTime = d3.time.format("%b %e");

                    chart.selectAll("rect")
                         .data(myData)
                         .enter().append("rect")
                         .attr("class", "bar")
                         .attr("x", function (d) { return xRange(d.Date); })
                         .attr("width", xRange.rangeBand())
                         .attr("y", function (d) { return yRange(d.Value); })
                         .attr("height", function (d) { return (height - yRange(d.Value)); })
                         //.attr("fill", "#0000ff")
                         .attr("fill", function (d) {
                             if (mark == "SleepEfficiency" && (d.Value < 95)) { return red; }
                                 //else if (mark == "MinutesToFallAsleep" && (d.Value > 30)) { return red; }
                             else if (mark == "MinutesAsleep" && (d.Value < 8)) { return red; }
                             else if (mark == "MinutesAsleep" && (d.Value > 10)) { return red; }
                             else if (mark == "MinutesAwake" && (d.Value > 27)) { return red; } // 0.05*540 min
                             else return blue;
                         })
                         .on("mouseover", function (d) {
                             var matrix = this.getScreenCTM()
                                .translate(+this.getAttribute("cx"), +this.getAttribute("cy"));

                             d3.select(this)
                               .attr("fill", "#747F97");

                             div.transition()
                                .duration(200)
                                .style("opacity", 0.9);

                             if (mark == "SleepEfficiency") { tooltiptext = formatTime(d.Date) + " (" + d.Day + ")" + "<br/>" + d.Value + "%"; }
                                 //else if (mark == "MinutesToFallAsleep") { tooltiptext = formatTime(d.Date) + " (" + d.Day + ")" + "<br/>" + d.Value + " min"; }
                             else if (mark == "MinutesAwake") { tooltiptext = formatTime(d.Date) + " (" + d.Day + ")" + "<br/>" + d.Value + " min"; }
                             else if (mark == "AwakeningsCount") { tooltiptext = formatTime(d.Date) + " (" + d.Day + ")" + "<br/>" + d.Value + " awakenings/restlessness"; }
                             else if (mark == "MinutesAsleep") {
                                 minutes = d.Value * 60;
                                 mh = minTohr(minutes);
                                 tooltiptext = formatTime(d.Date) + " (" + d.Day + ")" + "<br/>" + mh;
                             } else { tooltiptext = formatTime(d.Date) + " (" + d.Day + ")" + "<br/>" + d.Value; }


                             div.html(tooltiptext)
                                //.style("left", (d3.event.pageX - 34) + "px")
                                //.style("top", (d3.event.pageY - 12) + "px");
                                .style("left", (window.pageXOffset + matrix.e + 15) + "px")
                                .style("top", (window.pageYOffset + matrix.f - 30) + "px");
                             // Need a better solution here!!



                         })
                         .on("mouseout", function (d) {
                             d3.select(this)
                               //.attr("fill", "#bdbdbd");
                               .attr("fill", function (d) {
                                   if (mark == "SleepEfficiency" && (d.Value < 95)) { return red; }
                                       //else if (mark == "MinutesToFallAsleep" && (d.Value > 30)) { return red; }
                                   else if (mark == "MinutesAsleep" && ((d.Value > 10) || (d.Value < 8))) { return red; }
                                   else if (mark == "MinutesAwake" && (d.Value > 27)) { return red; } // 0.05*540 min
                                   else return blue;
                               });
                             div.transition()
                                .duration(500)
                                .style("opacity", 0);
                         });
                }
            </script>
        </div>
    <div class="container">
        <div class="row">
            <div class="col-md-12">
                <h2> My Sleep Data </h2>
                <hr/>
            </div>
        </div>

            <div class="tabbable">
                <div class="row">
                    <div class="col-md-12">
                        <ul class="nav nav-tabs" id="mytab">
                            <li class="active"><a class="MinutesAsleepTimeseries" href="#MinutesAsleepTimeseries" data-toggle="tab">Hours Asleep</a></li>
                            <li><a class="MinutesAwakeTimeseries" href="#MinutesAwakeTimeseries" data-toggle="tab">Minutes Restless</a></li>
                            <li><a class="SleepEfficiencyTimeseries" href="#SleepEfficiencyTimeseries" data-toggle="tab">Sleep Efficiency</a></li>

                        </ul>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-3 col-md-offset-6">
                        <ul class="legend">
                            <li><span class="good"></span>good</li>
                            <li><span class="bad"></span>bad</li>
                        </ul>
                    </div>
                </div>

                <div class="im-centered">
                    <div class="tab-content">
                        <div class="tab-pane active fade in" id="MinutesAsleepTimeseries">
                            <div id="MinutesAsleepTimeseries">
                                <script type="text/javascript">
                                    PlotTimeseries(MinutesAsleep, "#MinutesAsleepTimeseries", "MinutesAsleep", "Hours");
                                </script>
                            </div>


                            <div class="row">
                                <div class="col-md-12">
                                    <div id="AffectingFactorsMinutesAsleep">
                                        <script type="text/javascript">
                            testVis(cMinutesAsleep, "#AffectingFactorsMinutesAsleep", "AffectingFactorsMinutesAsleep", "MinutesAsleep");
                                        </script>
                                    </div>
                                </div>
                            </div>

                        </div>
                        <div class="tab-pane fade" id="MinutesAwakeTimeseries">
                            <div id="MinutesAwakeTimeseries">
                                <script type="text/javascript">
                                    PlotTimeseries(MinutesAwake, "#MinutesAwakeTimeseries", "MinutesAwake", "Mins");
                                </script>
                            </div>

                                <div class="row">
                                    <div class="col-md-12">
                                        <div id="AffectingFactorsMinutesAwake">
                                            <script type="text/javascript">
                                                testVis(cMinutesAwake, "#AffectingFactorsMinutesAwake", "AffectingFactorsMinutesAwake", "MinutesAwake");
                                            </script>
                                        </div>
                                    </div>
                                </div>

                        </div>
                        <div class="tab-pane fade" id="SleepEfficiencyTimeseries">
                            <div id="SleepEfficiencyTimeseries">
                                <script type="text/javascript">
                            PlotTimeseries(SleepEfficiency, "#SleepEfficiencyTimeseries", "SleepEfficiency", "%");
                                </script>
                            </div>
                                    <div class="row">
                                        <div class="col-md-12">
                                            <div id="AffectingFactorsSleepEfficiency">
                                                <script type="text/javascript">
                                                    testVis(cMinutesToFallAsleep, "#AffectingFactorsSleepEfficiency", "AffectingFactorsSleepEfficiency", "SleepEfficiency");
                                                </script>
                                            </div>
                                        </div>
                                    </div>
                        </div>
                    </div>
                </div>
            </div>


        <!--div class="row">
            <h4> Awakening Count </h4>
            <h6> My awakening count </h6>
        </!--div>
        <div class="row">
            <div class="col-md-6">
                <div id="AwakeningsCountTimeseries">
                    <script type="text/javascript">
                        PlotTimeseries(AwakeningsCount, "#AwakeningsCountTimeseries", "AwakeningsCount", "Awakenings Count");
                    </script>
                </div>
            </div>
            <div class="col-md-6">
                <div id="AffectingFactorsAwakeningsCount">
                    <script type="text/javascript">
                        testVis(cAwakeningsCount, "#AffectingFactorsAwakeningsCount", "AffectingFactorsAwakeningsCount", "AwakeningsCount");
                    </script>
                </div>
            </div>
        </div> <hr />
        <div class="im-centered">
            <div class="row">
            <div class="col-md-6">
                <h4>Minutes To Fall Asleep </h4>
                <h6> time to fall asleep </h6>
            </div>
            <div class="col-md-6">
                <ul class="legend">
                    <li><span class="good"></span>good</li>
                    <li><span class="bad"></span>bad</li>
                </ul>
            </div>
            </div>
        </div>
        <div class="im-centered">
            <div class="row">
                <div class="col-md-6">
                    <div id="MinutesToFallAsleepTimeseries">
                        <script type="text/javascript">
                            PlotTimeseries(MinutesToFallAsleep, "#MinutesToFallAsleepTimeseries", "MinutesToFallAsleep", "Time to fall asleep (min)");
                        </script>
                    </div>
                </div>
            </div>
        </div>
        <div class="im-centered">
            <div class="row">
                <div class="col-md-12">
                    <div id="AffectingFactorsMinutesToFallAsleep">
                        <script type="text/javascript">
                            testVis(cMinutesToFallAsleep, "#AffectingFactorsMinutesToFallAsleep", "AffectingFactorsMinutesToFallAsleep", "MinutesToFallAsleep");
                        </script>
                    </div>
                </div>
            </div>
        </div> <hr /-->
     <hr />

        <div style="color:#3376bf">
            <h5>
                <b>
                    @*<a href="/Userdatas/FactorList" class="btn btn-primary">Explore other factors that may impact your sleep &raquo; </a>
                    <a href="@Url.Action("FactorList", "Userdatas")" class="elements"><span>Explore other factors that may affect your sleep &raquo; </span></a>*@
            </b>
        </h5>
     </div>
</div>

    <script>
    $('#mytab a').click(function (e) {
      e.preventDefault();
      $(this).tab('show');
    })
    </script>
                   
 
</body>
</html>
