@using SleepMakeSense.Models
@*@model List<Userdata>*@
@*@model List<CorrList>*@

@model MyViewModel


@using System.Web.Script.Serialization


@{

    //ViewBag.Title = "Sync";
    Layout = "~/Views/Shared/_Layout.cshtml";

}

<!DOCTYPE html>

<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>Sync</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js" charset="utf-8"></script>
    <style type="text/css">
        .axis path, .axis line {
            fill: none;
            stroke: #bdbdbd;
            shape-rendering: crispEdges;
            font-size: x-small;
        }

        [class*="col-"] {
            background-clip: padding-box;
            /*border: 10px solid transparent;*/
            border: 2px solid;
            border-color: #bdbdbd;
        }

        div.tooltip {
            position: absolute;
            text-align: center;
            width: 60px;
            height: 28px;
            padding: 2px;
            font: 12px sans-serif;
            background: lightsteelblue;
            border: 0px;
            border-radius: 8px;
            pointer-events: none;
        }
    </style>
</head>

<body>


    <div id="DataProcessing">
        <script type="text/javascript">

            diameter = 450; // diameter defined!!

            var cMinutesAsleep = [];
            var cMinutesAwake = [];
            var cAwakeningsCount = [];
            var cTimeInBed = [];
            var cMinutesToFallAsleep = [];
            var cMinutesAfterWakeup = [];
            var cSleepEfficiency = [];
            var cAffectingFactors = []

            var MinutesAsleep = [];
            var MinutesAwake = [];
            var AwakeningsCount = [];
            var TimeInBed = [];
            var MinutesToFallAsleep = [];
            var MinutesAfterWakeup = [];
            var SleepEfficiency = [];

            //cAffectingFactors.push({ Name: "BMI", Coefficient: "0.5", Note: "Body Mass Index" });
            cAffectingFactors.push({ Name: "Weight", Coefficient: "0.5", Note: "Body Weight" });
            //cAffectingFactors.push({ Name: "Fat", Coefficient: "0.5", Note: "Fat rate" });
            cAffectingFactors.push({ Name: "Steps", Coefficient: "0.5", Note: "Steps walked during a whole day" });
            cAffectingFactors.push({ Name: "CaloriesOut", Coefficient: "0.5", Note: "Total amount of calories burnt during a whole day" });
            cAffectingFactors.push({ Name: "ActivityCalories", Coefficient: "0.5", Note: "Total amount of calories burnt during exercises" });
            cAffectingFactors.push({ Name: "Distance", Coefficient: "0.5", Note: "Total distance walked during a whole day" });
            cAffectingFactors.push({ Name: "MinutesFairlyActive", Coefficient: "0.5", Note: "Minutes spent fairly active during a whole day" });
            cAffectingFactors.push({ Name: "CaloriesIn", Coefficient: "0.5", Note: "Total amount of calories intaken during a whole day" });
            cAffectingFactors.push({ Name: "MinutesVeryActive", Coefficient: "0.5", Note: "Minutes spent very active during a whole day" });
            cAffectingFactors.push({ Name: "MinutesSedentary", Coefficient: "0.5", Note: "Minutes spent sitting during a whole day" });
            cAffectingFactors.push({ Name: "MinutesLightlyActive", Coefficient: "0.5", Note: "Minutes spent lightly active during a whole day" });
            cAffectingFactors.push({ Name: "Water", Coefficient: "0.5", Note: "Total amount of water (ml) drunk during a whole day" });



            @foreach (SleepMakeSense.Models.CorrList d in Model.CorrCoefficient)
            {

                if (@d.Belong == "MinutesAsleep") {
                    @:cMinutesAsleep.push({ Name: "@d.Name", Coefficient: "@d.Coefficient" });
                                                    } else if (@d.Belong == "MinutesAwake"){
                    @:cMinutesAwake.push({ Name: "@d.Name", Coefficient: "@d.Coefficient" });
                                                    } else if (@d.Belong == "AwakeningsCount"){
                    @:cAwakeningsCount.push({ Name: "@d.Name", Coefficient: "@d.Coefficient" });
                                                    } else if (@d.Belong == "TimeInBed"){
                    @:cTimeInBed.push({ Name: "@d.Name", Coefficient: "@d.Coefficient" });
                                                    } else if (@d.Belong == "MinutesToFallAsleep"){
                    @:cMinutesToFallAsleep.push({ Name: "@d.Name", Coefficient: "@d.Coefficient" });
                                                    } else if (@d.Belong == "MinutesAfterWakeup"){
                    @:cMinutesAfterWakeup.push({ Name: "@d.Name", Coefficient: "@d.Coefficient" });
                                                    } else if (@d.Belong == "SleepEfficiency"){
                    @:cSleepEfficiency.push({ Name: "@d.Name", Coefficient: "@d.Coefficient" });
                                                        }
    }


            @foreach (SleepMakeSense.Models.Userdata d in Model.AllData)
            {
                    var dateOnly = d.DateStamp.ToShortDateString();

                    @:MinutesAsleep.push({ Date: "@dateOnly", Value: "@d.MinutesAsleep" });
                                                        @:MinutesAwake.push({ Date: "@dateOnly", Value: "@d.MinutesAwake" });
                                                        @:AwakeningsCount.push({ Date: "@dateOnly", Value: "@d.AwakeningsCount" });
                                                        @:TimeInBed.push({ Date: "@dateOnly", Value: "@d.TimeInBed" });
                                                        @:MinutesToFallAsleep.push({ Date: "@dateOnly", Value: "@d.MinutesToFallAsleep" });
                                                        @:SleepEfficiency.push({ Date: "@dateOnly", Value: "@d.SleepEfficiency" });
                            }

            alert("Your Fitbit data synced! Visualize your personal sleep affecting factors now.");

            function PlotTimeseries(myData, section, sFeature) {

                var w = 500;
                var h = 200;
                var margin = { top: 30, right: 20, bottom: 50, left: 40 };
                width = w - margin.left - margin.right,
                height = h - margin.top - margin.bottom;
                parseDate = d3.time.format("%m/%d/%Y").parse;


                var xRange = d3.scale.ordinal()
                          .rangeRoundBands([0, width], 0.2);

                var yRange = d3.scale.linear()
                          .range([height, 0]);

                var xAxis = d3.svg.axis()
                              .scale(xRange)
                              .orient("bottom")
                              .ticks(8)
                              .tickFormat(d3.time.format("%b %e"));

                var yAxis = d3.svg.axis()
                              .scale(yRange)
                              .orient("left")
                              .ticks(5);

                var chart = d3.select(section).append("svg")
                              .attr("width", w)
                              .attr("height", h)
                              .append("g")
                               .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

                myData.forEach(function (d) {
                    d.Date = parseDate(d.Date);
                    d.Value = +d.Value;
                });

                xRange.domain(myData.map(function (d) { return d.Date; }));
                yRange.domain([0, d3.max(myData, function (d) { return d.Value })]);

                chart.append("g")
                    .attr("class", "x axis")
                    .attr("transform", "translate(0," + height + ")")
                    .call(xAxis)
                    .selectAll("text")
                    .style("text-anchor", "end")
                    .attr("dx", "-.8em")
                    .attr("dy", "-.55em")
                    .attr("transform", "rotate(-90)");

                chart.append("g")
                     .attr("class", "y axis")
                     .call(yAxis)
                     .append("text")
                    //.attr("transform", "rotate(-90)")
                    //.attr("y", 6)
                    //.attr("dy", ".71em")
                    //.style("text-anchor", "end")
                    .text(sFeature);

                var div = d3.select(section).append("div")
                            .attr("class", "tooltip")
                            .style("opacity", 0);
                var formatTime = d3.time.format("%b %e");

                chart.selectAll("rect")
                     .data(myData)
                     .enter().append("rect")
                     .attr("class", "bar")
                     .attr("x", function (d) { return xRange(d.Date); })
                     .attr("width", xRange.rangeBand())
                     .attr("y", function (d) { return yRange(d.Value); })
                     .attr("height", function (d) { return (height - yRange(d.Value)); })
                     .attr("fill", "#bdbdbd")
                     .on("mouseover", function (d) {
                         d3.select(this)
                           .attr("fill", "#3376bf");

                         div.transition()
                            .duration(200)
                            .style("opacity", 0.9);

                         div.html(formatTime(d.Date) + "<br/>" + d.Value)
                            .style("left", (d3.event.pageX - 64) + "px")
                            .style("top", (d3.event.pageY - 12) + "px");

                     })
                     .on("mouseout", function (d) {
                         d3.select(this)
                           .attr("fill", "#bdbdbd");
                         div.transition()
                            .duration(500)
                            .style("opacity", 0);
                     });


                /*bar.append("rect")
                    .attr("x", 1)
                    .attr("width", x(data[0].dx) - 1)
                    .attr("style", "fill:#bdbdbd")
                    .attr("height", function (d) { return height - y(d.y); });

                svg.append("g")
                    .attr("class", "x axis")
                    .attr("transform", "translate(0," + height + ")")
                    .call(xAxis);

                svg.append("text")
                    .attr("text-anchor", "middle")
                    .attr("class", "black")
                    .attr("transform", "translate(" + (width / 2) + "," + (height + 36) + ")")
                    .text(xax);

                svg.append("text")
                .attr("text-anchor", "middle")
                .attr("class", "black")
                .attr("transform", "translate(" + (-10) + "," + (height / 2) + ")rotate(-90)")
                .text(yax);*/

            }

        </script>
    </div>

    <div class="row">
        <div class="col-md-6 brdr-tp brdr-rght brdr-bttm brdr-lft" id="SleepFeatures">

            <h2> Sleep Structure </h2>
            <h4> Your sleep structure is characterized by the following 6 aspects.</h4><hr />

            <div id="SleepEfficiencyTimeseries">
                <div style="color:#3376bf"> <h4> <b> Sleep Efficiency </b> </h4> (The percentage of minutes asleep versus total minutes in bed)</div>
                <br>
                <!--script type="text/javascript">
                    var SleepEfficiencyAvg = d3.mean(SleepEfficiency, function (d) { return d.Value; });
                    document.getElementById("SleepEfficiencyTimeseries").innerHTML = SleepEfficiencyAvg;
                </script-->

                <p>
                    Want to know what factors impact your sleep efficiency? &nbsp;
                    @*<button type="button" class="btn btn-primary btn-xs" id="SleepEfficiency" onclick="testVis(cSleepEfficiency)"> EXPLORE &raquo; </button>*@
                    <input type="button" class="btn btn-primary btn-xs" id="SleepEfficiency" value="EXPLORE &raquo;" onclick="testVis(cSleepEfficiency)" />
                </p>
                <script type="text/javascript">
                    PlotTimeseries(SleepEfficiency, "#SleepEfficiencyTimeseries", "Sleep Efficiency(%)");
                </script>
                <hr />
            </div>

            <div id="TimeInBedTimeseries">
                <div style="color:#3376bf"> <h4> <b>Time In Bed </b> </h4> (Minutes asleep plus minutes awake) </div>
                <br>
                <p>
                    Want to know what factors impact your time in bed? &nbsp;
                    @*<button type="button" class="btn btn-primary btn-xs" id="TimeInBed" onclick="testVis(cTimeInBed)"> EXPLORE &raquo; </button>*@
                    <input type="button" class="btn btn-primary btn-xs" id="TimeInBed" value="EXPLORE &raquo;" onclick="testVis(cTimeInBed)" />
                </p>
                <script type="text/javascript">
                    PlotTimeseries(TimeInBed, "#TimeInBedTimeseries", "Time in bed (min)");
                </script>
                <hr />
            </div>

            <div id="MinutesToFallAsleepTimeseries">
                <div style="color:#3376bf"> <h4> <b> Minutes To Fall Asleep </b> </h4>(Time between light out and falling asleep) </div>
                <br>
                <p>
                    Want to know what factors impact how fast you fall asleep? &nbsp;
                    <button type="button" class="btn btn-primary btn-xs" id="MinutesToFallAsleep" onclick="testVis(cMinutesToFallAsleep)"> EXPLORE &raquo; </button>
                </p>
                <script type="text/javascript">
                    PlotTimeseries(MinutesToFallAsleep, "#MinutesToFallAsleepTimeseries", "Time to fall asleep (min)");
                </script>
                <hr />
            </div>

            <div id="MinutesAsleepTimeseries">
                <div style="color:#3376bf"> <h4> <b> Minutes Asleep </b> </h4> </div>
                <br>
                <p>
                    Want to know what factors impact the time you were asleep? &nbsp;
                    <button type="button" class="btn btn-primary btn-xs" id="MinutesAsleep" onclick="testVis(cMinutesAsleep)"> EXPLORE &raquo; </button>
                </p>
                <script type="text/javascript">
                    PlotTimeseries(MinutesAsleep, "#MinutesAsleepTimeseries", "Time asleep (min)");
                </script>
                <hr />
            </div>

            <div id="MinutesAwakeTimeseries">
                <div style="color:#3376bf"> <h4> <b> Minutes Awake </b> </h4> </div>
                <br>
                <p>
                    Want to know what factors impact the time you were awake? &nbsp;
                    <button type="button" class="btn btn-primary btn-xs" id="MinutesAwake" onclick="testVis(cMinutesAwake)"> EXPLORE &raquo; </button>
                </p>
                <script type="text/javascript">
                    PlotTimeseries(MinutesAwake, "#MinutesAwakeTimeseries", "Time awake (min)");
                </script>
                <hr />
            </div>

            <div id="AwakeningsCountTimeseries">
                <div style="color:#3376bf"> <h4> <b> Awakening Count </b> </h4> (The number of awakenings during a night)</div>
                <br>
                <p>
                    Want to know what factors impact your count of awakening? &nbsp;
                    <button type="button" class="btn btn-primary btn-xs" id="AwakeningsCount" onclick="testVis(cAwakeningsCount)"> EXPLORE &raquo; </button>
                </p>
                <script type="text/javascript">
                    PlotTimeseries(AwakeningsCount, "#AwakeningsCountTimeseries", "Awakenings count ");
                </script>
            </div>
        </div>


        <div class="col-md-6 sidebar-outer" id="AffectingFactors">
            <div class="sidebar" style="position:fixed">
                <h2>Factors Impact Sleep &nbsp; <button type="button" class="btn btn-primary" id="Reset" onclick="reSet(cAffectingFactors)"> RESET </button></h2>
                <p> Green bubbles affect your sleep positively; red bubbles affect your sleep negatively.</p>
                <p>You need to increase/strengthen green bubbles and decrease/avoid red bubbles.</p>

                <hr />

                <div id="BubbleChart">
                    <script type="text/javascript">
                        var bubble = d3.layout.pack()
                        .size([diameter, diameter])
                        .padding(1.5);

                        var svg = d3.select('#BubbleChart').append('svg')
                        .attr('width', diameter)
                        .attr('height', diameter);

                        function processData(data) {

                            var newDataSet = [];
                            for (var i = 0; i < data.length; i++) { // "i" is just the counter
                                var temp = Math.abs(data[i].Coefficient);
                                if (temp >= 0) {
                                    newDataSet.push({ name: i, className: data[i].Name, size: data[i].Coefficient }); // should let it be the same for all bubbles?
                                }
                            }
                            //var data = { name: "coefficient", children: newDataSet };
                            //return data;
                            return { children: newDataSet };
                        }

                        /*
                        function processData(data) {
                            //layout is part of D3′s family of hierarchical layouts and
                            // by default, D3 assumes that the input data is an object with
                            // a children array, so it is convenient to return the object looks like,
                            // {children: [an array of objects]}.

                            //console.log(data);
                            return { children: data };
                        }*/

                        function testVis(mydata) {

                            svg.selectAll(".node").remove();

                            bubble.value(function (d) { temp = Math.abs(d.size); if (temp >= 0) { return temp; } });

                            //var nodes = bubble.nodes(processData(mydata)).filter(function (d) { return !d.children; },
                            //   function (d) { return d.className; } );
                            //var nodes = bubble.nodes(processData(mydata)).filter(function (d) { return !d.children; });
                            var nodes = bubble.nodes(processData(mydata)).filter(function (d) { return d.className; });

                            var vis = svg.selectAll(".node").data(nodes);
                            //var vis = svg.selectAll("g").data(nodes);

                            var visEnter = vis.enter().append("g")
                            .attr("class", "node")
                            .attr("transform", function (d) { return "translate(" + d.x + "," + d.y + ")"; })

                            var circles = visEnter.append("circle")
                            .attr("r", function (d) { return d.r; })
                            .style("fill", function (d) {

                                coeff = d.size;
                                console.log(d.className);
                                console.log(coeff);

                                if (coeff < 0) {
                                    temp = Math.abs(coeff);
                                    if ((temp >= 0.8) && (temp <= 1.0)) { return "#FF0040"; }
                                    else if ((temp < 0.8) && (temp >= 0.5)) { return "#FE2E64"; }
                                    else if ((temp < 0.5) && (temp >= 0.3)) { return "#F7819F"; }
                                    else if ((temp < 0.3) && (temp >= 0.2)) { return "#F6CED8"; }
                                    else { return "#bdbdbd"; }
                                } else if (coeff >= 0) {
                                    if ((coeff >= 0.8) && (coeff <= 1.0)) { return "#00FFBF"; }
                                    else if ((coeff < 0.8) && (coeff >= 0.5)) { return "#58FAD0"; }
                                    else if ((coeff < 0.5) && (coeff >= 0.3)) { return "#81F7D8"; }
                                    else if ((coeff < 0.3) && (coeff >= 0.2)) { return "#A9F5E1"; }
                                }
                            });

                            visEnter.append("text")
                            .attr("dy", ".3em")
                            .style("text-anchor", "middle")
                            //.text(function (d) { console.log(d.Name); return d.Name.substring(0, d.r / 3); });
                            .text(function (d) { console.log(d.className); return d.className; });

                            vis.select("circle")
                            .transition().duration(1000)
                            .attr("r", function (d) { return d.r; })
                            .style("fill", function (d) {
                                coeff = d.size;
                                if (coeff < 0) {
                                    temp = Math.abs(coeff);
                                    if ((temp >= 0.8) && (temp <= 1.0)) { return "#FF0040"; }
                                    else if ((temp < 0.8) && (temp >= 0.5)) { return "#FE2E64"; }
                                    else if ((temp < 0.5) && (temp >= 0.3)) { return "#F7819F"; }
                                    else if ((temp < 0.3) && (temp >= 0.2)) { return "#F6CED8"; }
                                    else { return "#bdbdbd"; }
                                } else if (coeff >= 0) {
                                    if ((coeff >= 0.8) && (coeff <= 1.0)) { return "#00FFBF"; }
                                    else if ((coeff < 0.8) && (coeff >= 0.5)) { return "#58FAD0"; }
                                    else if ((coeff < 0.5) && (coeff >= 0.3)) { return "#81F7D8"; }
                                    else if ((coeff < 0.3) && (coeff >= 0.2)) { return "#A9F5E1"; }
                                    //else { return "#bdbdbd"; }
                                }
                            });

                            vis.transition().duration(1000).attr("class", "node")
                            .attr("transform", function (d) {
                                return "translate(" + d.x + "," + d.y + ")";
                            });

                            vis.select("title")
                                .text(function (d) {
                                    console.log(d.className);
                                    return d.className;
                                });

                        }

                        function reSet(mydata) {

                            var bubble = d3.layout.pack()
                                .size([diameter, diameter])
                                .value(function (d) { temp = Math.abs(d.Coefficient); if (temp >= 0) { return temp; } })
                                .padding(12); // padding between adjacent bubbles

                            var nodes = bubble.nodes(processData(mydata)).filter(function (d) { return !d.children; });
                            //var vis = svg.selectAll("circle").data(nodes);
                            var vis = svg.selectAll("g.node").data(nodes);

                            var visEnter = vis.enter().append("g")
                                .attr("class", "node")
                                .attr("transform", function (d) { return "translate(" + d.x + "," + d.y + ")"; })

                            var circles = visEnter.append("circle")
                               .attr("r", function (d) { return d.r; })
                               .style("fill", "#bdbdbd");

                            visEnter.append("text")
                                .attr("dy", ".3em")
                                .style("text-anchor", "middle")
                                //.text(function (d) { return d.Name.substring(0, d.r / 3); });
                                .text(function (d) { return d.Name; });

                            vis.select("circle")
                                .transition().duration(1000)
                                .attr("r", function (d) { return d.r; })
                                .style("fill", "#bdbdbd");

                            vis.transition().duration(1000).attr("class", "node")
                               .attr("transform", function (d) {
                                   return "translate(" + d.x + "," + d.y + ")";
                               });

                            vis.select(".value")
                                .text(function (d) {
                                    return format(d.value);
                                });

                            vis.select("title")
                               .text(function (d) {
                                   return d.Name + ":" + format(d.Coefficient);
                               });

                            vis.exit().transition().remove();

                        }

                        /*
                        function initialState(mydata) {

                            var svg = d3.select("#BubbleChart").append("svg")
                                .attr("width", diameter)
                                .attr("height", diameter)
                                .attr("class", "bubble");

                            var bubble = d3.layout.pack()
                           .size([diameter, diameter])
                           .value(function (d) { temp = Math.abs(d.Coefficient); if (temp >= 0) { return temp; } })
                           .padding(12); // padding between adjacent bubbles

                            var nodes = bubble.nodes(processData(mydata)).filter(function (d) { return !d.children; });
                            //var vis = svg.selectAll("circle").data(nodes);
                            var vis = svg.selectAll("g.node").data(nodes); // "vis" = "node" in the example

                            var visEnter = vis.enter().append("g")
                                .attr("class", "node")
                                .attr("transform", function (d) { return "translate(" + d.x + "," + d.y + ")"; })

                            var circles = visEnter.append("circle")
                                .attr("r", function (d) { return d.r })
                                .style("fill", "#bdbdbd")
                                .style("opacity", "0.64");

                            visEnter.append("text")
                            .attr("dy", ".3em")
                            .style("text-anchor", "middle")
                            .text(function (d) { return d.Name; })

                            vis.exit().remove();

                        }*/

                    </script>
                </div>


            </div>
        </div>

    </div>



    @*

        <h2>Retrieved Sleep Structure</h2>
        <table>
            <tr>
                <td>Date</td>
                <td>MinutesAsleep</td>
                <td>MinutesAwake</td>
                <td>AwakeningsCount </td>
                <td>TimeInBed </td>
                <td>MinutesToFallAsleep  </td>
                <td>MinutesAfterWakeup  </td>
                <td>SleepEfficiency  </td>
            </tr>

            @foreach (Userdata result in Model)
            {
                <tr>
                    <td>@result.DateStamp</td>
                    <td>@result.MinutesAsleep</td>
                    <td>@result.MinutesAwake</td>
                    <td>@result.AwakeningsCount</td>
                    <td>@result.TimeInBed </td>
                    <td>@result.MinutesToFallAsleep </td>
                    <td>@result.MinutesAfterWakeup </td>
                    <td>@result.SleepEfficiency </td>
                </tr>
            }
        </table>

        <h2>Retrieved Affecting Factors 1</h2>
        <table>
            <tr>
                <td>Date</td>
                <td>CaloriesIn </td>
                <td>Water </td>
                <td>CaloriesOut  </td>
                <td>Steps  </td>
                <td>Distance  </td>
                <td>MinutesSedentary   </td>
                <td>MinutesLightlyActive   </td>
                <td>MinutesFairlyActive   </td>
            </tr>

            @foreach (Userdata result in Model)
            {
                <tr>
                    <td>@result.DateStamp</td>
                    <td>@result.CaloriesIn</td>
                    <td>@result.Water  </td>
                    <td>@result.CaloriesOut </td>
                    <td>@result.Steps </td>
                    <td>@result.Distance  </td>
                    <td>@result.MinutesSedentary  </td>
                    <td>@result.MinutesLightlyActive  </td>
                    <td>@result.MinutesFairlyActive  </td>
                </tr>
            }
        </table>

        <h2>Retrieved Affecting Factors 2</h2>
        <table>
            <tr>
                <td>Date</td>
                <td> MinutesVeryActive   </td>
                <td> ActivityCalories   </td>
                <td> Floors   </td>
                <td> TimeEnteredBed   </td>
                <td> Weight   </td>
                <td> BMI   </td>
                <td> Fat   </td>
            </tr>

            @foreach (Userdata result in Model)
            {
                <tr>
                    <td>@result.DateStamp</td>
                    <td>@result.MinutesVeryActive   </td>
                    <td>@result.ActivityCalories   </td>
                    <td>@result.Floors    </td>
                    <td>@result.TimeEnteredBed    </td>
                    <td>@result.Weight     </td>
                    <td>@result.BMI     </td>
                    <td>@result.Fat    </td>

                </tr>
            }
            </table> *@


    <h2>Correlations</h2>
    <table>
        <tr>
            <td>Belong</td>
            <td>Factor</td>
            <td>Coefficient</td>
        </tr>

        @foreach (SleepMakeSense.Models.CorrList result in Model.CorrCoefficient)
        {
            <tr>
                <td>@result.Belong</td>
                <td>@result.Name</td>
                <td>@result.Coefficient</td>
            </tr>
        }
    </table>


</body>





</html>
